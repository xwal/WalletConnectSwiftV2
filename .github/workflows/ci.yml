name: ci

on:
  pull_request:
    branches: [ main, develop ]

env:
  HOMEBREW_NO_INSTALL_CLEANUP: 1

concurrency:
  # Support push/pr as event types with different behaviors each:
  # 1. push: queue up builds by branch
  # 2. pr: only allow one run per PR
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.event.pull_request.number || github.ref_name }}
  # If there is already a workflow running for the same pull request, cancel it
  # For non-PR triggers queue up builds
  cancel-in-progress: ${{ github.event_name == 'pull_request' }}

jobs:
  prepare:
    runs-on: macos-12
    steps:
      - uses: actions/checkout@v3

      - uses: ./.github/actions/build
        with:
          project-id: ${{ secrets.PROJECT_ID }}

  test:    
    needs: prepare
    runs-on: macos-12
    strategy:
      matrix:
        test-type: [integration-tests, smoke-tests]
        # test-type: [unit-tests, integration-tests, build-example-wallet, build-example-dapp, relay-tests]

    steps:
    - uses: actions/checkout@v3

    # - name: Get last develop commit SHA
    #   shell: bash
    #   run: |
    #     echo "Develop SHA: $(git log -n 1 origin/develop --pretty=format:"%H")"
    #     echo "develop-sha:$(git log -n 1 origin/develop --pretty=format:"%H")" >> $GITHUB_ENV

    - name: Setup Xcode Version
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: 14.2

    - uses: futureware-tech/simulator-action@v2
      with:
        model: 'iPhone 14'
        os: 'iOS'
        os_version: '16.2'
        erase_before_boot: false

    - uses: actions/cache/restore@v3
      with:
        path: |
          products.tar
        key: ${{ runner.os }}-deriveddata-

    - name: Untar DerivedDataCache
      shell: bash
      run: tar xvPpf products.tar

    - name: Update modified time for incremental builds
      shell: bash
      run: |
        python3 ./.github/scripts/git-restore-mtime --force

    - uses: ./.github/actions/ci
      with:
        type: ${{ matrix.test-type }}
        project-id: ${{ secrets.PROJECT_ID }}

    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v3
      if: success() || failure()
      with:
          check_name: ${{ matrix.test-type }} junit report
          report_paths: 'test_results/report.junit'
       
    - name: Zip test artifacts
      if: always()
      shell: bash
      run: test -d "test_results" && zip artifacts.zip -r ./test_results || echo "Nothing to zip"

    - name: Upload test artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.test-type }} test_results
        path: ./artifacts.zip
        if-no-files-found: warn
